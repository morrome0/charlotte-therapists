{"version":3,"file":"static/webpack/static/development/pages/index.js.3c590af691ef5000524e.hot-update.js","sources":["webpack:///./components/App.js"],"sourcesContent":["import { useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Listings from './Listings'\nimport Listing from './Listing'\nimport NavBar from './NavBar'\nimport Box from '@material-ui/core/Box'\nimport Map from './Map'\nimport Midbar from './Midbar'\nimport FiltersBar from './FiltersBar'\nimport Modal from './Modal'\nimport ModalContent from './ModalContent'\nimport { throttle } from 'lodash'\nimport BottomBar from './mobile/BottomBar'\nimport Subpage from './mobile/Subpage'\n\n\nconst useStyles = makeStyles({\n  root: {\n    height:'100vh',\n    display:'flex',\n    flexDirection: 'column'\n  },\n  main: {\n    display:\"flex\",\n    height:'100%',\n    overflow:\"hidden\"\n  },\n  mapbox: {\n    flexgrow:1\n  }\n});\n\nconst App = props => {\n  const classes = useStyles()\n\n  // MOBILE\n  const [mobile, setMobile] = useState(false)\n\n  useEffect(() => {\n    setMobile(window.innerWidth < 960)\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('resize', onWindowResize)\n    return () => window.removeEventListener('resize', onWindowResize)\n  })\n\n  const onWindowResize = throttle(() => setMobile( window.innerWidth < 960 ), 200, { 'leading': true});\n\n  // LISTINGS\n  const [selected, setSelected] = useState(null)\n  const [selectedTherapist, setSelectedTherapist] = useState(props.therapists[0])\n  const [showMidbar, setShowMidbar] = useState(false)\n\n  const getSelectedTherapist = () => {\n    return props.therapists.find((therapist) => therapist.id == selected)\n  }\n\n  useEffect(() => {\n    if (selected) setSelectedTherapist(getSelectedTherapist())\n  }, [selected])\n\n  // FILTERS\n  const defaultFilters = {\n    clientTypes: \"\",\n    specialties: \"\",\n    insurance: \"\",\n  }\n  const [filters, setFilters] = useState(defaultFilters)\n  const changeFilters = (filter, value) => {\n    setFilters({\n      ...filters,\n      [filter]: value\n    })\n  }\n\n  const clearFilters = () => {\n    setFilters(defaultFilters)\n  }\n\n  const therapists = props.therapists.filter(function (therapist) {\n    return (\n      (filters.clientTypes ? therapist.clientTypes.includes(filters.clientTypes) : therapist) &&\n      (filters.specialties ? therapist.specialties.includes(filters.specialties) : therapist) &&\n      (filters.insurance ? therapist.insurance.includes(filters.insurance) : therapist)\n    )\n  })\n\n  // MOBILE SUBPAGE\n  const [subpage, setSubpage] = useState(\"\")\n  const [previousSubpage, setPreviousSubpage] = useState(\"\")\n\n  const showSubpage = (content) => {\n    setPreviousSubpage(subpage)\n    setSubpage(content)\n  }\n\n  const showPreviousSubpage = () => {\n    setPreviousSubpage(\"\")\n    setSubpage(previousSubpage)\n  }\n\n  const closeSubpage = () => {\n    setSubpage(\"\")\n  }\n\n  // MODAL\n  const [modal, setModal] = useState(\"\")\n\n  const showModal = (content) => {\n    setModal(content)\n  }\n\n  const closeModal = () => {\n    setModal(\"\")\n  }\n\n\n  // REQUEST A LISTING STATE LOGIC\n  const [formFields, setFormFields] = useState({\n    name: \"\",\n    email: \"\"\n  })\n\n  const changeFormFields = e => {\n    setFormFields({...formFields,\n    [e.target.name]: e.target.value\n    })\n  }\n\n  const submitForm = async (e) => {\n    e.preventDefault()\n    setModal(\"loader\")\n    const url = process.env.API_BASE_URL + '/request-listing'\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n      'Content-Type': 'application/json',\n      'Token': process.env.API_TOKEN\n      },\n      body: JSON.stringify(formFields),\n    })\n    response.ok ? setModal(\"success\") : setModal(\"fail\")\n  }\n\n  if (mobile) {\n    return (\n      <div className={classes.root}>\n        <NavBar showModal={showModal} />\n        <Box className={classes.main}>\n          <Listings therapists={therapists} selected= {selected} setSelected={setSelected}  showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n          <Midbar therapist={selectedTherapist} showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n        </Box>\n        <BottomBar subpage={subpage} show={showSubpage}/>\n        {subpage &&\n        <Subpage back={showPreviousSubpage} show={showSubpage} content={subpage} onChange={changeFilters} activeFilters={filters} catalogue={props.catalogue} />\n        }\n        {console.log(filters)}\n      </div>\n    )\n  } else {\n    return (\n      <div className={classes.root}>\n        <NavBar showModal={showModal} />\n        <FiltersBar clearFilters={clearFilters} onChange={changeFilters} activeFilters={filters} catalogue={props.catalogue} />\n        <Box className={classes.main}>\n          <Listings therapists={therapists} selected= {selected} setSelected={setSelected}  showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n          <Midbar therapist={selectedTherapist} showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n          <Box style={{flexGrow: '1'}}><Map therapists={props.therapists} selected= {selected}/></Box>\n        </Box>\n        {modal &&\n        <Modal closeModal={closeModal}>\n          <ModalContent content={modal} formFields={formFields} handleChange={changeFormFields} handleSubmit={submitForm} />\n        </Modal>\n        }\n      </div>\n    )\n  }\n\n\n}\n\nexport default App\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAXA;AACA;AAeA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAhBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAqBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAhCA;AAAA;AAAA;AACA;AAoCA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAvDA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA;AAAA;AAAA;AACA;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAwFA;AACA;AAFA;AAvFA;AAAA;AACA;AA2FA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;AALA;AAIA;AAQA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcsourceRoot":""}