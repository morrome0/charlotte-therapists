{"ast":null,"code":"var _jsxFileName = \"/Users/miller/Code/charlotte-therapists/components/App.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Listings from './Listings';\nimport Listing from './Listing';\nimport NavBar from './NavBar';\nimport Box from '@material-ui/core/Box';\nimport Map from './Map';\nimport Midbar from './Midbar';\nimport Filters from './Filters';\nimport Modal from './Modal';\nimport ModalContent from './ModalContent';\nconst useStyles = makeStyles({\n  root: {\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  main: {\n    display: \"flex\",\n    height: '100%',\n    overflow: \"hidden\"\n  },\n  mapbox: {\n    flexgrow: 1\n  }\n});\n\nconst App = props => {\n  const classes = useStyles(); // LISTING STATE LOGIC\n\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(null);\n  const {\n    0: selectedTherapist,\n    1: setSelectedTherapist\n  } = useState({});\n  const {\n    0: showMidbar,\n    1: setShowMidbar\n  } = useState(true);\n\n  const getSelectedTherapist = () => {\n    return props.therapists.find(therapist => therapist.id == selected);\n  };\n\n  useEffect(() => {\n    if (selected) setSelectedTherapist(getSelectedTherapist());\n  }, [selected]); // FILTER STATE LOGIC\n\n  const defaultFilters = {\n    clientTypes: \"\",\n    specialties: \"\",\n    insurance: \"\"\n  };\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(defaultFilters);\n\n  const changeFilters = (filter, value) => {\n    setFilters(_objectSpread({}, filters, {\n      [filter]: value\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters(defaultFilters);\n  };\n\n  const therapists = props.therapists.filter(function (therapist) {\n    return (filters.clientTypes ? therapist.clientTypes.includes(filters.clientTypes) : therapist) && (filters.specialties ? therapist.specialties.includes(filters.specialties) : therapist) && (filters.insurance ? therapist.insurance.includes(filters.insurance) : therapist);\n  }); //MODAL CONTENT LOGIC\n\n  const {\n    0: modal,\n    1: setModal\n  } = useState(\"\");\n\n  const showModal = content => {\n    setModal(content);\n  };\n\n  const closeModal = () => {\n    setModal(\"\");\n  }; // REQUEST A LISTING STATE LOGIC\n\n\n  const {\n    0: formFields,\n    1: setFormFields\n  } = useState({\n    name: \"\",\n    email: \"\"\n  });\n\n  const changeFormFields = e => {\n    setFormFields(_objectSpread({}, formFields, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const submitForm = async e => {\n    e.preventDefault();\n    setModal(\"loader\");\n    const url = process.env.API_BASE_URL + '/request-listing';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Token': process.env.API_TOKEN\n      },\n      body: JSON.stringify(formFields)\n    });\n    response.ok ? setModal(\"success\") : setModal(\"fail\");\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, __jsx(NavBar, {\n    showModal: showModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), __jsx(Filters, {\n    clearFilters: clearFilters,\n    onChange: changeFilters,\n    activeFilters: filters,\n    catalogue: props.catalogue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    className: classes.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(Listings, {\n    therapists: therapists,\n    selected: selected,\n    setSelected: setSelected,\n    showMidbar: showMidbar,\n    setShowMidbar: setShowMidbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), __jsx(Midbar, {\n    therapist: selectedTherapist,\n    showMidbar: showMidbar,\n    setShowMidbar: setShowMidbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), __jsx(Box, {\n    display: {\n      xs: 'none',\n      sm: 'block'\n    },\n    style: {\n      flexGrow: '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(Map, {\n    therapists: props.therapists,\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 73\n    }\n  }))), modal && __jsx(Modal, {\n    closeModal: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, __jsx(ModalContent, {\n    content: modal,\n    formFields: formFields,\n    handleChange: changeFormFields,\n    handleSubmit: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/miller/Code/charlotte-therapists/components/App.js"],"names":["useState","useEffect","makeStyles","Listings","Listing","NavBar","Box","Map","Midbar","Filters","Modal","ModalContent","useStyles","root","height","display","flexDirection","main","overflow","mapbox","flexgrow","App","props","classes","selected","setSelected","selectedTherapist","setSelectedTherapist","showMidbar","setShowMidbar","getSelectedTherapist","therapists","find","therapist","id","defaultFilters","clientTypes","specialties","insurance","filters","setFilters","changeFilters","filter","value","clearFilters","includes","modal","setModal","showModal","content","closeModal","formFields","setFormFields","name","email","changeFormFields","e","target","submitForm","preventDefault","url","process","env","API_BASE_URL","response","fetch","method","headers","API_TOKEN","body","JSON","stringify","ok","catalogue","xs","sm","flexGrow"],"mappings":"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","sourcesContent":["import { useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Listings from './Listings'\nimport Listing from './Listing'\nimport NavBar from './NavBar'\nimport Box from '@material-ui/core/Box'\nimport Map from './Map'\nimport Midbar from './Midbar'\nimport Filters from './Filters'\nimport Modal from './Modal'\nimport ModalContent from './ModalContent'\n\n\nconst useStyles = makeStyles({\n  root: {\n    height:'100vh',\n    display:'flex',\n    flexDirection: 'column'\n  },\n  main: {\n    display:\"flex\",\n    height:'100%',\n    overflow:\"hidden\"\n  },\n  mapbox: {\n    flexgrow:1\n  }\n});\n\nconst App = props => {\n  const classes = useStyles()\n\n  // LISTING STATE LOGIC\n  const [selected, setSelected] = useState(null)\n  const [selectedTherapist, setSelectedTherapist] = useState({})\n  const [showMidbar, setShowMidbar] = useState(true)\n\n  const getSelectedTherapist = () => {\n    return props.therapists.find((therapist) => therapist.id == selected)\n  }\n\n  useEffect(() => {\n    if (selected) setSelectedTherapist(getSelectedTherapist())\n  }, [selected])\n\n  // FILTER STATE LOGIC\n  const defaultFilters = {\n    clientTypes: \"\",\n    specialties: \"\",\n    insurance: \"\",\n  }\n  const [filters, setFilters] = useState(defaultFilters)\n  const changeFilters = (filter, value) => {\n    setFilters({\n      ...filters,\n      [filter]: value\n    })\n  }\n\n  const clearFilters = () => {\n    setFilters(defaultFilters)\n  }\n\n  const therapists = props.therapists.filter(function (therapist) {\n    return (\n      (filters.clientTypes ? therapist.clientTypes.includes(filters.clientTypes) : therapist) &&\n      (filters.specialties ? therapist.specialties.includes(filters.specialties) : therapist) &&\n      (filters.insurance ? therapist.insurance.includes(filters.insurance) : therapist)\n    )\n  })\n\n  //MODAL CONTENT LOGIC\n    const [modal, setModal] = useState(\"\")\n\n    const showModal = (content) => {\n      setModal(content)\n    }\n\n    const closeModal = () => {\n      setModal(\"\")\n    }\n\n\n  // REQUEST A LISTING STATE LOGIC\n  const [formFields, setFormFields] = useState({\n    name: \"\",\n    email: \"\"\n  })\n\n  const changeFormFields = e => {\n    setFormFields({...formFields,\n    [e.target.name]: e.target.value\n    })\n  }\n\n  const submitForm = async (e) => {\n    e.preventDefault()\n    setModal(\"loader\")\n    const url = process.env.API_BASE_URL + '/request-listing'\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n      'Content-Type': 'application/json',\n      'Token': process.env.API_TOKEN\n      },\n      body: JSON.stringify(formFields),\n    })\n    response.ok ? setModal(\"success\") : setModal(\"fail\")\n  }\n\n  return (\n    <div className={classes.root}>\n      <NavBar showModal={showModal} />\n      <Filters clearFilters={clearFilters} onChange={changeFilters} activeFilters={filters} catalogue={props.catalogue}/>\n      <Box className={classes.main}>\n        <Listings therapists={therapists} selected= {selected} setSelected={setSelected}  showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n        <Midbar therapist={selectedTherapist} showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n        <Box display={{xs: 'none', sm:'block'}} style={{flexGrow: '1'}}><Map therapists={props.therapists} selected= {selected}/></Box>\n      </Box>\n      {modal &&\n      <Modal closeModal={closeModal}>\n        <ModalContent content={modal} formFields={formFields} handleChange={changeFormFields} handleSubmit={submitForm} />\n      </Modal>\n      }\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}