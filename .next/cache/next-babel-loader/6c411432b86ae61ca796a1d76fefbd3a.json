{"ast":null,"code":"var _jsxFileName = \"/Users/miller/Code/charlotte-therapists/components/app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Listings from '../components/Listings';\nimport Listing from '../components/Listing';\nimport NavBar from '../components/NavBar';\nimport Box from '@material-ui/core/Box';\nimport Map from '../components/Map';\nimport Midbar from '../components/Midbar';\nimport Filters from './Filters';\nconst useStyles = makeStyles({\n  root: {\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  main: {\n    display: \"flex\",\n    height: '100%',\n    overflow: \"hidden\"\n  },\n  mapbox: {\n    flexgrow: 1\n  }\n});\n\nconst App = props => {\n  const classes = useStyles(); // LISTING STATE LOGIC\n\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(null);\n  const {\n    0: selectedTherapist,\n    1: setSelectedTherapist\n  } = useState(props.therapists[0]);\n  const {\n    0: showMidbar,\n    1: setShowMidbar\n  } = useState(true);\n\n  const getSelectedTherapist = () => {\n    return props.therapists.find(therapist => therapist.id == selected);\n  };\n\n  useEffect(() => {\n    if (selected) setSelectedTherapist(getSelectedTherapist());\n  }, [selected]); // FILTER STATE LOGIC\n\n  const defaultFilters = {\n    clientTypes: \"\",\n    specialties: \"\"\n  };\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(defaultFilters);\n\n  const changeFilters = (filter, value) => {\n    setFilters(_objectSpread({}, filters, {\n      [filter]: value\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters(defaultFilters);\n  };\n\n  const therapists = props.therapists.filter(function (therapist) {\n    return (filters.clientTypes ? therapist.clientTypes.includes(filters.clientTypes) : therapist) && (filters.specialties ? therapist.specialties.includes(filters.specialties) : therapist);\n  }); // REQUEST A LISTING STATE LOGIC\n\n  const {\n    0: showModal,\n    1: setShowModal\n  } = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(true);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(NavBar, {\n    toggleModal: toggleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), __jsx(Filters, {\n    clearFilters: clearFilters,\n    onChange: changeFilters,\n    activeFilters: filters,\n    catalogue: props.catalogue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    className: classes.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(Listings, {\n    therapists: therapists,\n    selected: selected,\n    setSelected: setSelected,\n    showMidbar: showMidbar,\n    setShowMidbar: setShowMidbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), __jsx(Midbar, {\n    therapist: selectedTherapist,\n    showMidbar: showMidbar,\n    setShowMidbar: setShowMidbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), __jsx(Box, {\n    display: {\n      xs: 'none',\n      sm: 'block'\n    },\n    style: {\n      flexGrow: '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, __jsx(Map, {\n    therapists: props.therapists,\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 73\n    }\n  }))), showModal && __jsx(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/miller/Code/charlotte-therapists/components/app.js"],"names":["useState","useEffect","makeStyles","Listings","Listing","NavBar","Box","Map","Midbar","Filters","useStyles","root","height","display","flexDirection","main","overflow","mapbox","flexgrow","App","props","classes","selected","setSelected","selectedTherapist","setSelectedTherapist","therapists","showMidbar","setShowMidbar","getSelectedTherapist","find","therapist","id","defaultFilters","clientTypes","specialties","filters","setFilters","changeFilters","filter","value","clearFilters","includes","showModal","setShowModal","toggleModal","catalogue","xs","sm","flexGrow"],"mappings":"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","sourcesContent":["import { useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Listings from '../components/Listings'\nimport Listing from '../components/Listing'\nimport NavBar from '../components/NavBar'\nimport Box from '@material-ui/core/Box'\nimport Map from '../components/Map'\nimport Midbar from '../components/Midbar'\nimport Filters from './Filters'\n\n\nconst useStyles = makeStyles({\n  root: {\n    height:'100vh',\n    display:'flex',\n    flexDirection: 'column'\n  },\n  main: {\n    display:\"flex\",\n    height:'100%',\n    overflow:\"hidden\"\n  },\n  mapbox: {\n    flexgrow:1\n  }\n});\n\nconst App = props => {\n  const classes = useStyles()\n\n  // LISTING STATE LOGIC\n  const [selected, setSelected] = useState(null)\n  const [selectedTherapist, setSelectedTherapist] = useState(props.therapists[0])\n  const [showMidbar, setShowMidbar] = useState(true)\n\n  const getSelectedTherapist = () => {\n    return props.therapists.find((therapist) => therapist.id == selected)\n  }\n\n  useEffect(() => {\n    if (selected) setSelectedTherapist(getSelectedTherapist())\n  }, [selected])\n\n  // FILTER STATE LOGIC\n  const defaultFilters = {\n    clientTypes: \"\",\n    specialties: \"\",\n  }\n  const [filters, setFilters] = useState(defaultFilters)\n  const changeFilters = (filter, value) => {\n    setFilters({\n      ...filters,\n      [filter]: value\n    })\n  }\n\n  const clearFilters = () => {\n    setFilters(defaultFilters)\n  }\n\n  const therapists = props.therapists.filter(function (therapist) {\n    return (\n      (filters.clientTypes ? therapist.clientTypes.includes(filters.clientTypes) : therapist) &&\n      (filters.specialties ? therapist.specialties.includes(filters.specialties) : therapist)\n    )\n  })\n\n  // REQUEST A LISTING STATE LOGIC\n  const [showModal, setShowModal] = useState(false)\n  const toggleModal = () => {\n    setShowModal(true)\n  }\n\n\n  return (\n    <div className={classes.root}>\n      <NavBar toggleModal={toggleModal} />\n      <Filters clearFilters={clearFilters} onChange={changeFilters} activeFilters={filters} catalogue={props.catalogue}/>\n      <Box className={classes.main}>\n        <Listings therapists={therapists} selected= {selected} setSelected={setSelected}  showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n        <Midbar therapist={selectedTherapist} showMidbar={showMidbar} setShowMidbar={setShowMidbar}/>\n        <Box display={{xs: 'none', sm:'block'}} style={{flexGrow: '1'}}><Map therapists={props.therapists} selected= {selected}/></Box>\n      </Box>\n      {showModal &&\n      <Modal />}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}