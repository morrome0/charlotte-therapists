{"ast":null,"code":"var _jsxFileName = \"/Users/miller/Code/charlotte-therapists/components/Map.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  }\n});\n\nconst Map = props => {\n  const classes = useStyles();\n  const {\n    0: map,\n    1: setMap\n  } = useState({});\n  const {\n    0: markers,\n    1: setMarkers\n  } = useState([]);\n  const mapRef = useRef(null);\n\n  const initMap = () => {\n    const map = new google.maps.Map(mapRef.current, {\n      center: {\n        lat: 35.2271,\n        lng: -80.8431\n      },\n      zoom: 12,\n      disableDefaultUI: true,\n      styles: [{\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }]\n    });\n    setMap(map);\n    const markers = [];\n    props.therapists.forEach(therapist => {\n      if (therapist.location) {\n        let marker = new google.maps.Marker({\n          position: therapist.location,\n          map: map\n        });\n        markers.push({\n          \"id\": therapist.id,\n          \"object\": marker\n        });\n      }\n    });\n    setMarkers(markers);\n  };\n\n  useEffect(() => {\n    initMap();\n    return () => {};\n  }, []);\n\n  const changeSelectedMarker = () => {\n    markers.forEach(marker => marker.object.setAnimation(null));\n\n    if (props.therapists.find(therapist => therapist.id == props.selected).location) {\n      markers.find(marker => marker.id == props.selected).object.setAnimation(google.maps.Animation.BOUNCE);\n    }\n  };\n\n  useEffect(() => {\n    if (props.selected) changeSelectedMarker();\n    return () => {};\n  }, [props.selected]);\n  return __jsx(\"div\", {\n    ref: mapRef,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/miller/Code/charlotte-therapists/components/Map.js"],"names":["React","useEffect","useRef","useState","makeStyles","useStyles","root","flexGrow","Map","props","classes","map","setMap","markers","setMarkers","mapRef","initMap","google","maps","current","center","lat","lng","zoom","disableDefaultUI","styles","featureType","elementType","stylers","visibility","therapists","forEach","therapist","location","marker","Marker","position","push","id","changeSelectedMarker","object","setAnimation","find","selected","Animation","BOUNCE"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow:1,\n  },\n});\n\nconst Map = props => {\n  const classes = useStyles()\n  const [ map, setMap ] = useState({})\n  const [ markers, setMarkers ] = useState([])\n  const mapRef = useRef(null)\n\n  const initMap = () => {\n    const map = new google.maps.Map(mapRef.current, {\n      center: { lat: 35.2271, lng: -80.8431 },\n      zoom: 12,\n      disableDefaultUI: true,\n      styles: [{\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [\n              { visibility: \"off\" }\n        ]}]\n    });\n    setMap(map)\n\n    const markers = []\n    props.therapists.forEach((therapist) => {\n      if (therapist.location) {\n        let marker = new google.maps.Marker({position: therapist.location , map: map})\n        markers.push({\"id\": therapist.id, \"object\": marker})\n      }\n    })\n    setMarkers(markers)\n  }\n\n  useEffect(() => {\n    initMap()\n    return () => {\n    }\n  }, [])\n\n\n  const changeSelectedMarker = () => {\n    markers.forEach((marker) => marker.object.setAnimation(null))\n    if (props.therapists.find((therapist) => therapist.id == props.selected).location) {\n      markers.find((marker) => marker.id == props.selected).object.setAnimation(google.maps.Animation.BOUNCE)\n    }\n  }\n\n  useEffect(() => {\n    if (props.selected) changeSelectedMarker()\n    return () => {\n    }\n  }, [props.selected])\n\n  return (\n    <div ref={mapRef} className={classes.root}></div>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}